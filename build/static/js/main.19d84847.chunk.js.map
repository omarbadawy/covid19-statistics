{"version":3,"sources":["components/CoffeeCard.jsx","components/Cards.jsx","components/SelectInput.jsx","components/Chart.jsx","App.js","serviceWorker.js","index.js","images/logo.png"],"names":["useStyles","makeStyles","root","borderBottomWidth","borderBottomStyle","minHeight","title","fontSize","pos","marginBottom","CoffeeCard","React","memo","props","classes","cases","description","color","countup","end","parseInt","Card","className","style","borderColor","CardContent","Typography","gutterBottom","variant","component","Cards","Grid","container","spacing","item","xs","sm","allCases","recovered","deaths","theme","selectInputStyle","padding","cursor","width","breakpoints","up","SelectInput","useState","country","setCountry","countries","setCountries","useEffect","axios","get","then","response","data","id","value","onChange","event","target","onSetCountry","map","key","ISO2","Country","Chart","chartData","setChartData","labels","datasets","label","backgroundColor","borderWidth","chart","centerLogo","textAlign","margin","image","App","allStatus","setAllStatus","loading","setLoading","object","catch","err","console","log","message","length","Confirmed","Recovered","Deaths","cards","obj","hasOwnProperty","isEmpty","direction","src","Logo","alt","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.19d84847.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport CountUp from 'react-countup';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        borderBottomWidth: '10px',\r\n        borderBottomStyle: 'solid',\r\n        minHeight: '200px',\r\n    },\r\n    title: {\r\n        fontSize: 14,\r\n    },\r\n    pos: {\r\n        marginBottom: 12,\r\n    },\r\n});\r\n\r\nconst CoffeeCard = React.memo((props) => {\r\n    const classes = useStyles();\r\n    const { title, cases, description, color } = props;\r\n\r\n    let countup = <CountUp end={parseInt(cases)} />;\r\n\r\n    return (\r\n        <Card className={classes.root} style={{ borderColor: color }}>\r\n            <CardContent>\r\n                <Typography color=\"textSecondary\" gutterBottom>\r\n                    {title}\r\n                </Typography>\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                    {countup}\r\n                </Typography>\r\n                <Typography variant=\"body2\" component=\"p\">\r\n                    {description}\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n});\r\n\r\nexport default CoffeeCard;\r\n","import React from 'react';\r\nimport CoffeeCard from './CoffeeCard';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nconst Cards = (props) => {\r\n    return (\r\n        <Grid container spacing={4}>\r\n            <Grid item xs={12} sm={4}>\r\n                <CoffeeCard\r\n                    title=\"Infected\"\r\n                    cases={props.allCases.cases}\r\n                    color=\"#7F7FFF\"\r\n                    description={`Number of infected causes by COVID-19`}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n                <CoffeeCard\r\n                    title=\"Recovered\"\r\n                    cases={props.allCases.recovered}\r\n                    color=\"#7FFF7F\"\r\n                    description={`Number of recoverd causes from COVID-19`}\r\n                />\r\n            </Grid>\r\n            <Grid item xs={12} sm={4}>\r\n                <CoffeeCard\r\n                    title=\"Deaths\"\r\n                    cases={props.allCases.deaths}\r\n                    color=\"#FF7F7F\"\r\n                    description={`Number of deaths causes by COVID-19`}\r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Cards;\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    selectInputStyle: {\r\n        padding: '10px',\r\n        fontSize: '14px',\r\n        cursor: 'pointer',\r\n        width: '200px',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: '350px',\r\n            fontSize: '16px',\r\n        },\r\n    },\r\n}));\r\n\r\nconst SelectInput = (props) => {\r\n    const [country, setCountry] = useState('Global');\r\n    const [countries, setCountries] = useState([]);\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        axios.get('https://api.covid19api.com/countries').then((response) => {\r\n            setCountries(response.data);\r\n        });\r\n    }, []);\r\n\r\n    const handleChange = (event) => {\r\n        setCountry(event.target.value);\r\n        props.onSetCountry(event.target.value);\r\n    };\r\n    return (\r\n        <select\r\n            className={classes.selectInputStyle}\r\n            id=\"select\"\r\n            value={country}\r\n            onChange={handleChange}\r\n        >\r\n            <option value=\"Global\">Global</option>\r\n            {countries &&\r\n                countries.map((country) => (\r\n                    <option key={country.ISO2} value={country.ISO2}>\r\n                        {country.Country}\r\n                    </option>\r\n                ))}\r\n        </select>\r\n    );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\n\r\nconst Chart = (props) => {\r\n    const [chartData, setChartData] = useState({});\r\n\r\n    const chart = (props) => {\r\n        setChartData({\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [\r\n                {\r\n                    label: 'People',\r\n                    data: [props.allCases.cases, props.allCases.recovered, props.allCases.deaths],\r\n                    backgroundColor: ['#7F7FFF', '#7FFF7F', '#FF7F7F'],\r\n                    borderWidth: 4,\r\n                },\r\n            ],\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        chart(props);\r\n    }, [props]);\r\n\r\n    return (\r\n        <div>\r\n            <Bar data={chartData} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from 'react';\n\nimport axios from 'axios';\nimport Logo from './images/logo.png';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/';\n\nimport Cards from './components/Cards';\nimport SelectInput from './components/SelectInput';\nimport Chart from './components/Chart';\n\nconst useStyles = makeStyles((theme) => ({\n    centerLogo: {\n        textAlign: 'center',\n        margin: '50px 0',\n    },\n    image: {\n        width: '250px',\n        [theme.breakpoints.up('md')]: {\n            width: '370px',\n        },\n    },\n}));\n\nconst App = () => {\n    const [country, setCountry] = useState('Global');\n    const [allStatus, setAllStatus] = useState({});\n    const [loading, setLoading] = useState(false);\n    const classes = useStyles();\n\n    useEffect(() => {\n        setLoading(true);\n        if (country === 'Global') {\n            axios\n                .get('https://coronavirus-19-api.herokuapp.com/all')\n                .then((response) => {\n                    const object = {\n                        cases: response.data.cases,\n                        recovered: response.data.recovered,\n                        deaths: response.data.deaths,\n                    };\n                    setAllStatus(object);\n                    setLoading(false);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                });\n        } else {\n            axios\n                .get(`https://api.covid19api.com/total/dayone/country/${country}`)\n                .then((response) => {\n                    const object = {\n                        cases: response.data[response.data.length - 1].Confirmed,\n                        recovered: response.data[response.data.length - 1].Recovered,\n                        deaths: response.data[response.data.length - 1].Deaths,\n                    };\n                    setAllStatus(object);\n                    setLoading(false);\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                });\n        }\n    }, [country]);\n\n    const setCountryHandler = (country) => {\n        setCountry(country);\n    };\n    const isEmpty = (obj) => {\n        for (var key in obj) {\n            if (obj.hasOwnProperty(key)) return false;\n        }\n        return true;\n    };\n\n    let cards = <Cards allCases={{ cases: 0, deaths: 0, recovered: 0 }} />;\n    if (!isEmpty(allStatus) && !loading) {\n        cards = <Cards allCases={allStatus} />;\n    }\n\n    return (\n        <Grid container direction=\"column\">\n            <Grid item className={classes.centerLogo}>\n                <img src={Logo} className={classes.image} alt=\"Covid19\" />\n            </Grid>\n            <Grid item container>\n                <Grid item xs={false} sm={1} md={2} />\n                <Grid item xs={12} sm={10} md={8}>\n                    {cards}\n                </Grid>\n                <Grid item xs={false} sm={1} md={2} />\n            </Grid>\n            <Grid item className={classes.centerLogo}>\n                <SelectInput onSetCountry={setCountryHandler} />\n            </Grid>\n            <Grid item container>\n                <Grid item xs={false} sm={1} md={2} />\n                <Grid item xs={12} sm={10} md={8}>\n                    <Chart allCases={allStatus} />\n                </Grid>\n                <Grid item xs={false} sm={1} md={2} />\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.d7265326.png\";"],"sourceRoot":""}